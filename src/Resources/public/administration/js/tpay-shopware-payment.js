(this.webpackJsonp=this.webpackJsonp||[]).push([["tpay-shopware-payment"],{"3cBK":function(e,t){e.exports="{% block sw_order_detail_base_secondary_info_payment %}\n    {% parent %}\n    <template v-if=\"isTpayPayment\">\n        <dt>{{ $tc('tpay-shopware-payment.order.tpayTransactionIdLabel') }}</dt>\n        <dd>{{ currentOrder.transactions.last().customFields.tpay_shopware_payment_transaction_id }}</dd>\n    </template>\n{% endblock %}\n"},Ke8G:function(e){e.exports=JSON.parse('{"tpay-shopware-payment":{"config":{"successTestMerchantCredentialsNotificationTitle":"Testowe połączenie","successTestMerchantCredentialsNotificationMessage":"Pomyślnie nawiązano testowe połączenie z serwerem Tpay","errorTestMerchantCredentialsNotificationTitle":"Nieudane testowe połączenie","errorTestMerchantCredentialsNotificationMessage":"Wystąpił problem z tetowym połączeniem. Sprawdź poprawność podanych danych","buttonCredentialsTest":"Przetestuj połączenie"},"order":{"tpayTransactionIdLabel":"Identyfikator transakcji Tpay"}}}')},gw8V:function(e){e.exports=JSON.parse('{"tpay-shopware-payment":{"config":{"successTestMerchantCredentialsNotificationTitle":"Valid merchant credentials","successTestMerchantCredentialsNotificationMessage":"Test connection to Tpay server successfully established","errorTestMerchantCredentialsNotificationTitle":"Invalid merchant credentials","errorTestMerchantCredentialsNotificationMessage":"Check your credentials and try again.","buttonCredentialsTest":"Test credentials"},"order":{"tpayTransactionIdLabel":"Tpay transaction identifier"}}}')},iUeT:function(e){e.exports=JSON.parse('{"tpay-shopware-payment":{"config":{"successTestMerchantCredentialsNotificationTitle":"Valid merchant credentials","successTestMerchantCredentialsNotificationMessage":"Test connection to Tpay server successfully established","errorTestMerchantCredentialsNotificationTitle":"Invalid merchant credentials","errorTestMerchantCredentialsNotificationMessage":"Check your credentials and try again.","buttonCredentialsTest":"Test credentials"},"order":{"tpayTransactionIdLabel":"Tpay transaction identifier"}}}')},o5sq:function(e,t){e.exports='{% block tpay_shopware_payment_test_merchant_credentials_button %}\n    <sw-button-process :isLoading="isLoading" :processSuccess="isSuccess" :animationTimeout="100" @click="tpayTestMerchantCredentials" >\n        {{ $tc(\'tpay-shopware-payment.config.buttonCredentialsTest\') }}\n    </sw-button-process >\n{% endblock %}\n'},oR15:function(e,t,a){"use strict";a.r(t);var s=a("o5sq"),n=a.n(s);const{Component:i,Mixin:r}=Shopware;i.register("tpay-test-merchant-credentials-button",{template:n.a,inject:["TpayMerchantCredentialsService"],mixins:[r.getByName("notification")],data:()=>({isLoading:!1,isSuccess:!1}),methods:{tpayTestMerchantCredentials(){this.isLoading=!0;const e=this.$parent.$parent.$children,t=this.getValue(e,"merchantId"),a=this.getValue(e,"merchantSecret"),s=this.getValue(e,"merchantTrApiKey"),n=this.getValue(e,"merchantTrApiPass");this.TpayMerchantCredentialsService.validateMerchantCredentials(t,a,s,n).then(e=>{this.isLoading=!1,e.credentialsValid?this.onSuccess():this.onError()}).catch(()=>{this.isLoading=!1,this.onError()})},onSuccess(){const e=this;this.isSuccess=!0,this.createNotificationSuccess({title:this.$tc("tpay-shopware-payment.config.successTestMerchantCredentialsNotificationTitle"),message:this.$tc("tpay-shopware-payment.config.successTestMerchantCredentialsNotificationMessage"),autoClose:!0}),setTimeout(()=>e.isSuccess=!1,2e3)},onError(){this.createNotificationError({title:this.$tc("tpay-shopware-payment.config.errorTestMerchantCredentialsNotificationTitle"),message:this.$tc("tpay-shopware-payment.config.errorTestMerchantCredentialsNotificationMessage"),autoClose:!0})},getFieldByName:(e,t)=>e.$attrs.name==="TpayShopwarePayment.config."+t,getValue(e,t){const a=e.find(e=>this.getFieldByName(e,t));return void 0===a.currentValue||""===a.currentValue?a.$attrs.placeholder:a.currentValue}}});var c=a("3cBK"),o=a.n(c);const{Component:p}=Shopware;p.override("sw-order-user-card",{template:o.a,computed:{isTpayPayment(){const e=this.currentOrder.transactions.last().customFields;return null!==e&&e.hasOwnProperty("tpay_shopware_payment_transaction_id")&&e.tpay_shopware_payment_transaction_id.length>0}}});const d=Shopware.Classes.ApiService;class l extends d{constructor(e,t,a="tpay"){super(e,t,a)}validateMerchantCredentials(e,t,a,s){return this.httpClient.post(`_action/${this.getApiBasePath()}/validate-merchant-credentials`,{merchantId:e,merchantSecret:t,merchantTrApiKey:a,merchantTrApiPass:s},{headers:this.getBasicHeaders()}).then(e=>d.handleResponse(e))}}const{Application:h}=Shopware;h.addServiceProvider("TpayMerchantCredentialsService",e=>{const t=h.getContainer("init");return new l(t.httpClient,e.loginService)});var y=a("gw8V"),u=a("iUeT"),m=a("Ke8G");Shopware.Locale.extend("de-DE",y),Shopware.Locale.extend("en-GB",u),Shopware.Locale.extend("pl-PL",m)}},[["oR15","runtime"]]]);